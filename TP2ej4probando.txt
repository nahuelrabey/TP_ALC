import template_funciones_2 as tp2

def simetrica_y_binaria(D, m):
    A = func.construye_adyacencia(D,m)  #Construimos matriz de adyacencia de m conexiones.
    A = (1/2) * (A + A.T)              #Simetrizamos
    A = np.ceil(A)                     #La volvemos binaria (0s y 1s) ¿¿¿ Ponemos el .astype(int) ???
    return A

import matplotlib.colors as pltColores

#Modificando la función antes definida para que grafique nodos coloreados según grupo de pertenencia:
def graficar_grupos(grupos, A, ax, titulo):
    # recibe:
    #  - grupos: Lista de listas, donde cada sublista tiene los índices de los museos que pertenecen a un mismo grupo.
    #  - ax (matplotlib.axes.Axes): Eje matplotlib donde dibujar el gráfico.
    #  - titulo: título del gráfico

    G = nx.from_numpy_array(A) # Construimos la red a partir de la matriz de adyacencia
    # Construimos un layout a partir de las coordenadas geográficas
    G_layout = {i:v for i,v in enumerate(zip(museos.to_crs("EPSG:22184").get_coordinates()['x'],museos.to_crs("EPSG:22184").get_coordinates()['y']))}

    # Lista de muchos colores:
    colores = list(pltColores.TABLEAU_COLORS.values()) + list(pltColores.CSS4_COLORS.values())
    
    # Asignamos colores por nodo
    color_por_museo = {}
    for i, grupo in enumerate(grupos):
        for museo in grupo:
            color_por_museo[museo] = colores[i % len(colores)]  #El módulo es para volver a repetir colores si la cantidad de grupos fuera aún mayor.
    
    # Creamos la lista final en el orden de G.nodes
    secuencia_colores = [color_por_museo[museo] for museo in G.nodes]    

    # fig, ax = plt.subplots(figsize=(15, 15)) # Visualización de la red en el mapa
    barrios.to_crs("EPSG:22184").boundary.plot(color='gray',ax=ax) # Graficamos Los barrios
    nx.draw_networkx(G,G_layout, node_color=secuencia_colores, ax=ax,with_labels=False) # Graficamos red
    ax.set_title(titulo)
  # plt.show()


conexiones = [3,5,10,50]
fig, axs = plt.subplots(2,2, figsize=(15, 15))
axs = axs.flatten()
for i in range(len(conecciones)):
    m = conexiones[i]
    ax = axs[i]
    #print(f"Nueva cantidad de conexiones: {m}")
    A = construye_adyacencia(D,m)
    Asb = simetrica_y_binaria(D, m)
    grupos = tp2.modularidad_iterativo(Asb)
    titulo = f"Red de museos con {m} conexiones, obtenemos {len(grupos)} grupos"
    graficar_grupos(grupos, A, ax, titulo)
    #print(f"{len(grupos)} grupos detectados para m = {m}")
fig.suptitle("Grupos obtenidos usando el método iterativo de modularidad", fontsize=16)
plt.show()


conexiones = [3,5,10,50]
#Observando los gráficos vemos en orden, para 3, 5, 10 y 50 conexiones, 15, 11, 8, y 2 subgrupos.
#Dado que la cantidad de subgrupos es 2^(nro.niveles), elegimos 16, 8, 8 y 2 subgrupos:
nro_niveles = [4, 3, 3, 1]
fig, axs = plt.subplots(2,2, figsize=(15, 15))
axs = axs.flatten()
for i in range(len(conecciones)):
    m = conexiones[i]
    nro_niv = nro_niveles[i]
    ax = axs[i]
    #print(f"Nueva cantidad de conexiones: {m}")
    A = construye_adyacencia(D,m)
    Asb = simetrica_y_binaria(D, m)
    grupos = tp2.laplaciano_iterativo(Asb, nro_niv)
    titulo = f"Red de museos con {m} conexiones, pidiendo {2**nro_niv} grupos"
    graficar_grupos(grupos, A, ax, titulo)
    #print(f"{len(grupos)} grupos detectados para m = {m} y nro. de niveles = {nro_niv}")
fig.suptitle("Grupos obtenidos usando el método iterativo Laplaciano", fontsize=16)
plt.show()
